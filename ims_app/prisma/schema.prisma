generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ims_institution {
  inst_id          Int                 @id @default(autoincrement())
  inst_name        String              @db.VarChar(60)
  inst_description String?             @db.VarChar(100)
  inst_location    String?             @db.VarChar(60)
  inst_phone       String?             @db.VarChar(20)
  inst_email       String?             @db.VarChar(60)
  inst_current_no_plate Int            @default(0)
  ims_registers    ims_register[]
  ims_registers_in ims_registered_in[]
}

model ims_details_asset {
  deta_id          Int         @id @default(autoincrement())
  deta_description String?     @db.VarChar(100)
  deta_req_id      Int
  deta_assets_no   String
  ims_assets       ims_assets  @relation(fields: [deta_assets_no], references: [assets_no], onDelete: Cascade, onUpdate: Cascade, map: "assets_details")
  ims_request      ims_request @relation(fields: [deta_req_id], references: [req_id], onDelete: Cascade, onUpdate: Cascade, map: "request_details")
}

model ims_assets {
  assets_regis_location                                         Int
  invoice_date                                                  DateTime?
  assets_no                                                     String                @id
  assets_description                                            String                @db.VarChar(30)
  assets_brand                                                  String                @db.VarChar(15)
  assets_model                                                  String                @db.VarChar(20)
  assets_series                                                 String                @db.VarChar(20)
  assets_state                                                  EnumAssetsState       @default(Bueno)
  assets_acquisition_value                                      String                @db.VarChar(30)
  assets_curr_location                                          Int?
  assets_invoice_number                                         String?
  asset_law_id                                                 Int?
  asset_responsible_id                                          Int?
  ims_laws                                                      ims_laws?             @relation(fields: [asset_law_id], references: [law_id])
  ims_responsible                                               ims_responsible?      @relation(fields: [asset_responsible_id], references: [responsible_id])
  ims_details_assets                                            ims_details_asset[]
  ims_locations_ims_assets_assets_regis_locationToims_locations ims_locations         @relation("ims_assets_assets_regis_locationToims_locations", fields: [assets_regis_location], references: [location_id], onDelete: Cascade, onUpdate: Cascade, map: "good_location")
  ims_locations_ims_assets_assets_curr_locationToims_locations  ims_locations?        @relation("ims_assets_assets_curr_locationToims_locations", fields: [assets_curr_location], references: [location_id], onDelete: Cascade, onUpdate: Cascade, map: "good_loc_curr")
  ims_register_assets                                           ims_register_assets[]
}

enum EnumAssetsState {
  Bueno
  Regular
  Malo
}

model ims_locations {
  location_id                                                Int           @id @default(autoincrement())
  location_name                                              String        @db.VarChar(30)
  ims_assets_ims_assets_assets_regis_locationToims_locations ims_assets[]  @relation("ims_assets_assets_regis_locationToims_locations")
  ims_assets_ims_assets_assets_curr_locationToims_locations  ims_assets[]  @relation("ims_assets_assets_curr_locationToims_locations")
  ims_request                                                ims_request[]
}

model ims_register {
  reg_id              Int                   @id @default(autoincrement())
  reg_tomo            Int
  reg_folio           Int
  reg_asiento         Int
  reg_type            EnumRegisterType
  reg_date            DateTime?
  reg_observation     String?               @db.VarChar(3000)
  reg_usu_id          Int
  ims_users           ims_users             @relation(fields: [reg_usu_id], references: [usu_id], onDelete: Cascade, onUpdate: Cascade, map: "sgi_usuario_registro")
  ims_register_assets ims_register_assets[]
  reg_inst_id         Int
  ims_institution     ims_institution       @relation(fields: [reg_inst_id], references: [inst_id], onDelete: Cascade, onUpdate: Cascade, map: "sgi_register_institution")
}

enum EnumRegisterType {
  Register
  Low
  Transfer
}

model ims_register_assets {
  assets_no    String
  reg_id       Int
  ims_assets   ims_assets   @relation(fields: [assets_no], references: [assets_no], onDelete: Cascade, onUpdate: Cascade, map: "register_assets_fk01")
  ims_register ims_register @relation(fields: [reg_id], references: [reg_id], onDelete: Cascade, onUpdate: Cascade, map: "register_assets_fk02")

  @@id([assets_no, reg_id])
}

model ims_registered_in {
  tomo            Int
  folio           Int
  asiento         Int
  inst_id         Int
  ims_institution ims_institution @relation(fields: [inst_id], references: [inst_id])

  @@id([tomo, folio, asiento])
}

model ims_request {
  req_id              Int                 @id @default(autoincrement())
  req_description     String              @db.VarChar(100)
  req_state           EnumReqState        @default(Pending)
  req_date            DateTime
  req_type            EnumReqType
  req_usu_id          Int
  req_location_id_new Int?
  ims_details_asset   ims_details_asset[]
  ims_locations       ims_locations?      @relation(fields: [req_location_id_new], references: [location_id], onDelete: Restrict, onUpdate: Restrict, map: "location_request")
  ims_users           ims_users           @relation(fields: [req_usu_id], references: [usu_id], onDelete: Cascade, onUpdate: Cascade, map: "user_request")
}
enum EnumReqState {
  Accepted
  Denied
  Pending
}
enum EnumReqType {
  Low
  Transfer
}

model ims_users {
  usu_id       Int            @id @default(autoincrement())
  usu_name     String         @db.VarChar(60)
  usu_surnames String         @db.VarChar(60)
  usu_email    String         @db.VarChar(60)
  usu_role     EnumUserRole   @default(noRole)
  ims_register ims_register[]
  ims_request  ims_request[]
}

enum EnumUserRole {
  Admin
  User
  noRole
  Inactive
}

model ims_laws {
  law_id          Int          @id @default(autoincrement())
  law_name        String       @db.VarChar(20)
  law_description String?      @db.VarChar(60)
  ims_assets      ims_assets[]
}

model ims_responsible {
  responsible_id          Int          @id @default(autoincrement())
  responsible_name        String       @db.VarChar(20)
  ims_assets      ims_assets[]
}
